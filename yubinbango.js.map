{"version":3,"sources":["node_modules/yubinbango-core/yubinbango-core.ts","yubinbango.ts"],"names":["CACHE","YubinBango","Core","inputVal","callback","this","URL","REGION","c","replace","s","String","fromCharCode","charCodeAt","match","join","yubin7","chk7","getAddr","addrDic","prototype","val","length","region_id","region","locality","street","extended","selectAddr","addr","jsonp","url","fn","window","data","scriptTag","document","createElement","setAttribute","head","appendChild","_this","yubin3","substr","ISO31661JP","HADRLIST","MicroformatDom","hadrloop","hadrs","querySelectorAll","map","call","hadr","countryNameCheck","postalcode","addEventListener","e","applyDom","getFormNode","target","parentNode","elm","tagName","classList","contains","a","querySelector","innerHTML","value","some","indexOf","reduceVal","address","setAddr","reduce","b","postalFormClear","postalFormSet","addrs","o","p-region-id","p-region","p-locality","p-street-address","p-extended-address"],"mappings":"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","file":"yubinbango.js","sourcesContent":["let CACHE = [];\nmodule YubinBango {\n  export class Core {\n    URL = 'https://yubinbango.github.io/yubinbango-data/data';\n    REGION: string[] = [\n      null, '北海道', '青森県', '岩手県', '宮城県',\n      '秋田県', '山形県', '福島県', '茨城県', '栃木県',\n      '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',\n      '新潟県', '富山県', '石川県', '福井県', '山梨県',\n      '長野県', '岐阜県', '静岡県', '愛知県', '三重県',\n      '滋賀県', '京都府', '大阪府', '兵庫県', '奈良県',\n      '和歌山県', '鳥取県', '島根県', '岡山県', '広島県',\n      '山口県', '徳島県', '香川県', '愛媛県', '高知県',\n      '福岡県', '佐賀県', '長崎県', '熊本県', '大分県',\n      '宮崎県', '鹿児島県', '沖縄県'\n    ];\n    constructor(inputVal: string = '', callback?) {\n      if(inputVal){\n        // 全角の数字を半角に変換 ハイフンが入っていても数字のみの抽出\n        const a:string = inputVal.replace(/[０-９]/g, (s: string) => String.fromCharCode(s.charCodeAt(0) - 65248));\n        const b:RegExpMatchArray = a.match(/\\d/g);\n        const c:string = b.join('');\n        const yubin7: string = this.chk7(c);\n        // 7桁の数字の時のみ作動\n        if (yubin7) {\n          this.getAddr(yubin7, callback);\n        } else {\n          callback(this.addrDic());\n        }\n      }\n    }\n    chk7(val: string) {\n      if (val.length === 7) {\n        return val;\n      }\n    }\n    addrDic(region_id = '', region = '', locality = '', street = '', extended = ''):{[key:string]: string} {\n      return {\n        'region_id': region_id,\n        'region': region,\n        'locality': locality,\n        'street': street,\n        'extended': extended\n      };\n    }\n    selectAddr(addr: string[]):{[key:string]: string} {\n      if (addr && addr[0] && addr[1]) {\n        return this.addrDic(addr[0],this.REGION[addr[0]],addr[1],addr[2],addr[3])\n      } else {\n        return this.addrDic()\n      }\n    }\n    jsonp(url: string, fn) {\n      window['$yubin'] = (data) => fn(data);\n      const scriptTag = document.createElement(\"script\");\n      scriptTag.setAttribute(\"type\", \"text/javascript\");\n      scriptTag.setAttribute(\"charset\", \"UTF-8\");\n      scriptTag.setAttribute(\"src\", url);\n      document.head.appendChild(scriptTag);\n    }\n    getAddr(yubin7: string, fn):{[key:string]: string} {\n      const yubin3 = yubin7.substr(0, 3);\n      // 郵便番号上位3桁でキャッシュデータを確認\n      if (yubin3 in CACHE && yubin7 in CACHE[yubin3]) {\n        return fn(this.selectAddr(CACHE[yubin3][yubin7]));\n      } else {\n        this.jsonp(`${this.URL}/${yubin3}.js`, (data) => {\n          CACHE[yubin3] = data;\n          return fn(this.selectAddr(data[yubin7]));\n        });\n      }\n    }\n  }\n}\n","/// <reference path=\"./node_modules/yubinbango-core/yubinbango-core.ts\"/>\n\nconst ISO31661JP = [\"Japan\", \"JP\", \"JPN\", \"JAPAN\"];\nconst HADRLIST = [\"p-region-id\", \"p-region\", \"p-locality\", \"p-street-address\", \"p-extended-address\"];\nmodule YubinBango {\n  export class MicroformatDom {\n    constructor(\n      ) {\n      this.hadrloop();\n    }\n    hadrloop() {\n      // HTML内のh-adr要素のリストに対して操作を行う\n      const hadrs = document.querySelectorAll('.h-adr');\n      [].map.call(hadrs, (hadr) => {\n        // country-name が日本かどうかチェック\n        if (this.countryNameCheck(hadr)) {\n          // 郵便番号の入力欄を取得\n          const postalcode = hadr.querySelectorAll('.p-postal-code');\n          // 郵便番号入力欄が1つの場合でも3桁-4桁で2つに分かれている場合でも両方に対応するため、それぞれのh-adr内の中の最後のpostal-codeにkeyupイベントを付与する\n          postalcode[postalcode.length - 1].addEventListener(\"keyup\", (e)=>{\n            MicroformatDom.prototype.applyDom(this.getFormNode(e.target.parentNode));\n          }, false);\n        }\n      });\n    }\n    getFormNode(elm){\n      return (elm.tagName !== \"FORM\" && !elm.classList.contains(\"h-adr\"))? this.getFormNode(elm.parentNode) : elm;\n    }\n    // 日本かどうかチェックする\n    countryNameCheck(elm) {\n      const a = elm.querySelector('.p-country-name');\n      const arr:string[] = [a.innerHTML, a.value];\n      return (arr.some((val: string) => (ISO31661JP.indexOf(val) >= 0)))\n    }\n    applyDom(elm) {\n      const postalcode = elm.querySelectorAll('.p-postal-code');\n      new YubinBango.Core(this.reduceVal(postalcode), (address) => this.setAddr(elm, address));\n    }\n    reduceVal(postalcode: any[]): string {\n      return [].map.call(postalcode, a => a.value).reduce((a, b) => a + b);\n    }\n    setAddr(elm, address) {\n      const fnlist = [this.postalFormClear, this.postalFormSet];\n      // 住所欄に入力されているデータを削除 & 住所欄に入力\n      fnlist.map((fn) => HADRLIST.map((val: string) => fn(val, elm, address)));\n    }\n    postalFormClear(val: string, elm, data?) {\n      if (data){\n        const addrs = elm.querySelectorAll('.' + val);\n        [].map.call(addrs, (addr) => {\n          return addr.value = '';\n        });\n      }\n    }\n    postalFormSet(val: string, elm, data?) {\n      const o = {\n        \"p-region-id\": data.region_id,\n        \"p-region\": data.region,\n        \"p-locality\": data.locality,\n        \"p-street-address\": data.street,\n        \"p-extended-address\": data.extended\n      };\n      const addrs = elm.querySelectorAll('.' + val);\n      [].map.call(addrs, (addr) => {\n        return addr.value += (o[val])? o[val] : '';\n      });\n    }\n  }\n}\ndocument.addEventListener('DOMContentLoaded', () => {\n  new YubinBango.MicroformatDom();\n}, false);\n"],"sourceRoot":"."}